package com.techvidvan.methodoverriding;
public class Addition
{
        int add(int a, int b)
        {
                return (a + b);
        }
        int add(int a , int b , int c)
        {
                return (a + b + c) ;
        }
        double add(double a , double b)
        {
                return (a + b);
        }
        double add(int a , double b)
        {
                return (a + b);
        }
        public static void main( String args[])
        {
                Addition ob = new Addition();

                System.out.println("Calling add method with two int parameters: " +ob.add(17, 25));
                System.out.println("Calling add method with three int parameters: " +ob.add(55, 27, 35));
                System.out.println("Calling add method with two double parameters: " +ob.add(36.5, 42.8));
                System.out.println("Calling add method with one int and one double parameter: " +ob.add(11, 24.5));
        }
}

**********************************************************************************************

public class MyClass
{
      //Overloaded method
      public int multiply(int num1, num2)
      {
            return num1 * num2;
      }

      //Overloading method
      public int multiply(float num1, int num2)  //method with different signature
      {
            return num1 * num2
      }
}

****************************************************************
public class MyClass
{
      // Overloaded method
      public int multiply(int num1, num2)
      {
            return num1 * num2;
      }

      // Overloading method
      public float multiply(int num1, num2) //Not valid because we only chnaged the return type
      {
            return num1 * num2;
      }
}

*****************************************************************

public class MyClass
{
      // Overloaded method
      public int multiply(int num1, num2) throws NullPointerException
      {
            return num1 * num2;
      }

      // Overloading method
      public int multiply(int num1, num2) throws Exception
      //not valid because throwing different type of exception will not lead to method overloadig
      {
            return num1 * num2;
      }
}****************************************************

package com.techvidvan.methodoverriding;
//Base Class
class Parent
{
  void view()
  {
    System.out.println("This is a parent class method");
  }
}
class Child extends Parent
{
  @Override
  void view()
  {
    System.out.println("This is a child class method");
  }
}
//Driver class
public class MethodOverriding
{
  public static void main(String args[])
  {
    Parent obj = new Parent();
    obj.view();
    Parent obj1 = new Child();
    obj1.view();
  }
}
*********************************************
public class AdditionOperation {
static int addition(int num1,int num2){return num1+num2;} //function declarationand definition for addition of two numbers
static int addition(int num1,int num2,int num3){return num1+num2+num3;} //function declarationand definition for addition of three numbers
public static void main(String args[]) {
system.out.printin(addition(35,36)); //method overloading
system.out.printin(addition(35,36,37)); //method overloading, we are calling same methods but for different number of arguments.
}
}
*********************************************************
public class additionOperation {
static int addition(int num1,int num2){return num1+num2;} //function declarationand definition for addition of two numbers
static double addition(double num1,num2){return num1+num2;} //function declarationand definition for addition of three numbers
public static void main(String args[]) {
system.out.printin(addition(35,36)); //method overloading
system.out.printin(addition(35.5,36.6)); //method overloading, we are calling same methods but for different type of arguments.
}
}

******************************************************

/Parent or Super class
class Parent {
public void display() {
system.out.printin("Hello, I am from parent class");
}
}
//Child or sub class
class Sub extends Parent {
//Below method overrides the Parent display() method
// @override
public void display() {
system.out.printin("Hello, I am from child class");
}
}
//Driver class
public class Overriding {
public static void main?(String args[])
{
Parent superObject = new Parent ();
superObject.display(); // Super class method is called
Parent subObject = new Sub();
subObject.display(); //Child class method is called by a parent type reference: this is functionality of method overriding
Sub subObject2 = new Sub(); //Child class method is called by a child type reference
subObject2.display();
}
}


**********************************************************

