https://www.javatpoint.com/difference-between-string-and-stringbuffer
No.	String	StringBuffer
1)	The String class is immutable.	The StringBuffer class is mutable.
2)	String is slow and consumes more memory when we concatenate too many strings because every time it creates new instance.
	StringBuffer is fast and consumes less memory when we concatenate t strings.
3)	String class overrides the equals() method of Object class. So you can compare the contents of two strings by equals() method.
	StringBuffer class doesn't override the equals() method of Object class.
4)	String class is slower while performing concatenation operation.	
StringBuffer class is faster while performing concatenation operation.
5)	String class uses String constant pool.
	StringBuffer uses Heap memory
	
	
	
	***********************************************************************
	
	No.	StringBuffer	StringBuilder
1)	StringBuffer is synchronized i.e. thread safe. It means two threads can't call the methods of StringBuffer simultaneously.
	StringBuilder is non-synchronized i.e. not thread safe. It means two threads can call the methods of StringBuilder simultaneously.
2)	StringBuffer is less efficient than StringBuilder.	
    StringBuilder is more efficient than StringBuffer.
3)	StringBuffer was introduced in Java 1.0	
    StringBuilder was introduced in Java 1.5
    
    	***********************************************************************
    
    
    String Concatenation in Java
In Java, String concatenation forms a new String that is the combination of multiple strings. There are two ways to concatenate strings in Java:

By + (String concatenation) operator
By concat() method